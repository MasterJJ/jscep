jSCEP aims to be fully compliant with the [http://tools.ietf.org/html/draft-nourse-scep latest SCEP Internet-Draft].  The following operations are supported in the current release:

== CA Profiles ==

Supports CA identifiers for SCEP servers supporting multiple CAs.

== Discover CA Capabilities ==

=== Rollover Certificates ===

If the current CA certificate is about to expire, we can check to see if the CA has a certificate certified for _future_ use that we can use to sign our certificate.  This is available in the API, but there is no logic for use in the certificate.  Would be good to prompt user?

When the current CA certificate is ready to expire, we can retrieve the next CA instead.

*Not currently implemented.  Need to refactor signedData generator.*

=== HTTP POST ===

Sending requests over POST vs GET

=== Renewing Certificates ===

Does the CA support certificate renewal, or just enrollment of new certificates.

Signed by CA or third-party?

Provide a certificate signed by a third-party CA, or the current CA.

=== Supported Message Digest Algorithms ===

Does the CA support one of the following:

 * MD5
 * SHA-1
 * SHA-256
 * SHA-512

What is the strongest algorithm it supports?

=== Supported Cipher Algorithms ===

Does server support DES or Triple DES?  What is the strongest cipher supported by the CA?

== Retrieve CA Certificate ==

GetCACert

== Retrieve "Rollover" CA Certificate ==

GetNextCACert

== Certificate Access ==

!GetCert and !GetCertInitial

== CRL Access ==

GetCRL

== Certificate Enrollment ==

PKCSReq

The goal of the jSCEP project is simple: to produce a pure Java implementation of the SCEP protocol that complies with the [http://tools.ietf.org/html/draft-nourse-scep latest SCEP Internet-Draft], and is compatible with *any* compliant SCEP server implementation, including, but not limited to:

   * [http://ejbca.sourceforge.net/ EJBCA]
   * [http://www.openca.org/ OpenCA]