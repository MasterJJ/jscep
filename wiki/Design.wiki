#summary Design Highlights
#labels Phase-Design

= Introduction =

This page discusses some of the design highlights of jSCEP

= Details =

== Requester Builder ==

Because there are quite a few optional inputs for a SCEP client, we use the Builder pattern for creating a new [http://code.google.com/p/jscep/source/browse/trunk/src/main/com/google/code/jscep/Requester.java Requester] instance.  This prevents us from having to define multiple constructors for Requester.

The Requester.Builder class has a fluent interface, so calls to all methods other than `build()` will return the builder itself, so:

{{{
URL url = new URL("http://ca.example.org/scep/");
X500Principal subject = ...;
KeyPair keyPair = ...;

Requester.Builder builder = new Requester.Builder(url);
builder = builder.proxy(Proxy.NO_PROXY);
builder = builder.subject(subject);
builder = builder.keyPair(keyPair);
builder = builder.caIdentifier("ca");
Requester client = builder.build();
}}}

is the same as:

{{{
URL url = new URL("http://ca.example.org/scep/");
X500Principal subject = ...;
KeyPair keyPair = ...;

Requester client = new Requester.Builder(url)
                                .proxy(Proxy.NO_PROXY)
                                .subject(subject)
                                .keyPair(keyPair)
                                .caIdentifier("ca")
                                .build();
}}}

Invalid combinations of inputs (such as using an existing Certificate, put not providing the appropriate Key Pair) will result in an java.lang.!InvalidStateException