<wiki:toc/>

This section shows how to create a SCEP client.  

{{{
final X509Certificate clientCertificate = ...;
final KeyPair clientKeyPair = ...;

final Client.Builder builder = new Client.Builder();
builder.url(new URL("http://www.example.org/scep/pkiclient.exe"));
builder.caFingerprint(digest, "MD5");
builder.identity(clientCertificate, clientKeyPair);
final Client client = builder.build();
}}}


The first step is to create an instance of the Client builder.

{{{
Client.Builder builder = new Client.Builder();
}}}

== Specifying the SCEP Server ==

As a minimum, each client must be able to locate the SCEP server:

{{{
URL url = new URL("http://www.example.org/scep/pkiclient.exe");
builder.url(url);
}}}

=== Proxy Server ===

If you need to go through a proxy server to make HTTP requests, you will need to tell jSCEP the location of your proxy:

{{{
Proxy proxy = getProxy();
builder.proxy(proxy);
}}}

If you don't provide a proxy, jSCEP will default to using [http://java.sun.com/javase/6/docs/api/java/net/Proxy.html#NO_PROXY Proxy.NO_PROXY].

=== Technical Note on Validating URLs ===

Your URL must satisfy the following requirements:

{{{
url.getProtocol().matches("^https?$");
url.getPath().endsWith("pkiclient.exe");
url.getRef() == null
url.getQuery() == null;
}}}

== Identifying the CA ==

Next, you must provide a way for the SCEP client to validate the CA.  This can be done by providing the hash of the certificate and algorithm name:

{{{
byte[] digest = new byte[] {-93, -44, 23, 25, -106, 116, 80, -113, 36, 23, 76, -89, -36, -18, 89, -59}
builder.caFingerprint(digest, "MD5");
}}}

The algorithm must be one of `MD5`, `SHA-1`, `SHA-256` or `SHA-512`.

Alternatively, you can have jSCEP prompt the user using Swing or a CLI application for confirmation of the CA fingerprint by providing a [http://java.sun.com/javase/6/docs/api/javax/security/auth/callback/CallbackHandler.html CallbackHandler]:

{{{
CallbackHandler handler = ...;
builder.callbackHandler(handler);
}}}

The !CallbackHandler will be expected to handle a single callback: [http://jscep.googlecode.com/svn/trunk/documentation/com/google/code/jscep/FingerprintVerificationCallback.html FingerprintVerificationCallback].

=== Technical Note on Calculating Digests ===

The digest of the CA certificate is calculated like so:

{{{
MessageDigest md = MessageDigest.getInstance(digestAlgorithm);
byte[] digest = md.digest(ca.getEncoded());
}}}

If your digest algorithm is not provided by a Security [http://java.sun.com/javase/6/docs/api/java/security/Provider.html Provider], jSCEP will throw a [http://java.sun.com/javase/6/docs/api/java/security/NoSuchAlgorithmException.html NoSuchAlgorithmException].

== Specifying the Certification Entity ==

Next, you have to provide a certificate and key pair to represent the SCEP client.  This can be the certificate and key pair that you are enrolling, but it may also be different.

{{{
X509Certificate identity = getCurrentCertificate();
KeyPair keyPair = getKeyPair();
builder.identity(identity, keyPair);
}}}

=== Technical Note on Key Pairs ==

The key pair you provide *must* satisfy the following requirements:

{{{
keyPair.getPrivate().getAlgorithm().equals("RSA");
keyPair.getPublic().getAlgorithm().equals("RSA");
}}}

== CA Identification ==

If your SCEP server provides multiple CA certificates, you might need to provide a ca identifier, e.g.

{{{
builder.caIdentifier("myCA");
}}}

== Building ==

Once you've finished specifying arguments, invoke the `build()` method on the Client.Builder.

{{{
Client client = builder.build();
}}}

The constructor will throw an [http://java.sun.com/javase/6/docs/api/java/lang/IllegalStateException.html IllegalStateException] if you fail to comply with the above rules.